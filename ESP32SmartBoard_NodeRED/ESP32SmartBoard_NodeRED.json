[
    {
        "id": "e367a66498457c49",
        "type": "tab",
        "label": "SmartBoard_Template",
        "disabled": false,
        "info": ""
    },
    {
        "id": "12a3e17e763239f7",
        "type": "debug",
        "z": "e367a66498457c49",
        "name": "SmBrd_Settings_Heartbeat",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 720,
        "wires": []
    },
    {
        "id": "3812594aeea6a365",
        "type": "mqtt out",
        "z": "e367a66498457c49",
        "name": "",
        "topic": "SmBrd/<BoardName>/Settings/Heartbeat",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f6785e21fcb08933",
        "x": 1020,
        "y": 760,
        "wires": []
    },
    {
        "id": "53cad6a5e65d4b7a",
        "type": "ui_gauge",
        "z": "e367a66498457c49",
        "name": "Humidity",
        "group": "b90cdd60e8af675b",
        "order": 4,
        "width": 3,
        "height": 2,
        "gtype": "donut",
        "title": "Humidity",
        "label": "%rH",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#e6e600",
            "#00b500",
            "#ca3838"
        ],
        "seg1": "40",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 920,
        "y": 260,
        "wires": []
    },
    {
        "id": "6f52f493af689a13",
        "type": "ui_level",
        "z": "e367a66498457c49",
        "group": "b90cdd60e8af675b",
        "order": 3,
        "width": 3,
        "height": 2,
        "name": "Temperature",
        "label": "Temperature",
        "colorHi": "#e60000",
        "colorWarn": "#008040",
        "colorNormal": "#ff8000",
        "colorOff": "#c0c0c0",
        "min": 0,
        "max": "45",
        "segWarn": "15",
        "segHigh": "30",
        "unit": "Â°C",
        "layout": "sv",
        "channelA": "",
        "channelB": "",
        "decimals": "1",
        "animations": "soft",
        "shape": "2",
        "colorschema": "valuedriven",
        "textoptions": "default",
        "colorText": "#eeeeee",
        "fontLabel": "",
        "fontValue": "",
        "fontSmall": "",
        "colorFromTheme": true,
        "textAnimations": false,
        "hideValue": false,
        "tickmode": "segments",
        "peakmode": false,
        "property": "payload",
        "peaktime": 3000,
        "x": 930,
        "y": 220,
        "wires": []
    },
    {
        "id": "59635050a8424380",
        "type": "mqtt in",
        "z": "e367a66498457c49",
        "name": "",
        "topic": "SmBrd/<BoardName>/Data/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "f6785e21fcb08933",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 180,
        "y": 240,
        "wires": [
            [
                "68832e9774d28af1",
                "289e58b1c113f7e7",
                "be3dd6d31addcadb",
                "e6c4c53b3f04adbe",
                "facd05e0d7b76b32"
            ]
        ]
    },
    {
        "id": "289e58b1c113f7e7",
        "type": "function",
        "z": "e367a66498457c49",
        "name": "Sensor_Decoder",
        "func": "\nvar StatusInfo = { fill: \"grey\", shape: \"dot\", text: \"???\" };\nvar Msg_Uptime = {}; \nvar Msg_Temperature = {};\nvar Msg_Humidity = {};\nvar Msg_Co2Value = {};\nvar iUptimeSeconds;\nvar iDays;\nvar iHours;\nvar iMinutes;\nvar iSeconds;\nvar strUptime;\n\n\n// make sure that a data record was received\nif ( !msg.topic.includes(\"StData\") )\n{\n    StatusInfo = { fill: \"yellow\", shape: \"dot\", text: msg.topic };\n    node.status(StatusInfo);\n    return [null, null, null];\n}\n\n// get Uptime from StationData Message\niUptimeSeconds = msg.payload.Uptime;\niDays = Math.floor(iUptimeSeconds / 86400);\niUptimeSeconds %= 86400;\niHours = Math.floor(iUptimeSeconds / 3600);\niUptimeSeconds %= 3600;\niMinutes = Math.floor(iUptimeSeconds / 60);\niSeconds = iUptimeSeconds % 60;\n\nstrUptime = iDays.toString() + \"d/\" +\n            iHours.toString().padStart(2, \"0\") + \":\" +\n            iMinutes.toString().padStart(2, \"0\") + \":\" +\n            iSeconds.toString().padStart(2, \"0\");\nMsg_Uptime.payload = strUptime;\n\n// get Sensor Data from StationData Message\nMsg_Temperature.payload = msg.payload.Temperature;\nMsg_Humidity.payload = msg.payload.Humidity;\nMsg_Co2Value.payload = msg.payload.Co2Value;\n\n// set NodeStatus text\nStatusInfo = { fill: \"green\", shape: \"ring\", text: \"Tmp: \" + Msg_Temperature.payload.toString() + \"; \" +\n                                                   \"Hum: \" + Msg_Humidity.payload.toString() + \"; \" +\n                                                   \"CO2: \" + Msg_Co2Value.payload.toString() };\nnode.status(StatusInfo);\n\nreturn [Msg_Uptime, Msg_Temperature, Msg_Humidity, Msg_Co2Value];\n\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 240,
        "wires": [
            [
                "28247c2086228cdd"
            ],
            [
                "6f52f493af689a13"
            ],
            [
                "53cad6a5e65d4b7a"
            ],
            [
                "37bbd6c35a873341"
            ]
        ]
    },
    {
        "id": "37bbd6c35a873341",
        "type": "ui_gauge",
        "z": "e367a66498457c49",
        "name": "CO2 Level",
        "group": "b90cdd60e8af675b",
        "order": 7,
        "width": 3,
        "height": 2,
        "gtype": "gage",
        "title": "CO2",
        "label": "ppm",
        "format": "{{value}}",
        "min": "0",
        "max": "3000",
        "colors": [
            "#00b400",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "1000",
        "seg2": "2000",
        "diff": false,
        "className": "",
        "x": 930,
        "y": 300,
        "wires": []
    },
    {
        "id": "304d141185851b62",
        "type": "ui_table",
        "z": "e367a66498457c49",
        "group": "b90cdd60e8af675b",
        "name": "Sensor Data",
        "order": 10,
        "width": 8,
        "height": 3,
        "columns": [
            {
                "field": "id",
                "title": "No",
                "width": "13%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Sensor",
                "title": "Sensor",
                "width": "25%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Value",
                "title": "Value",
                "width": "20%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Timestamp",
                "title": "Timestamp",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 930,
        "y": 400,
        "wires": []
    },
    {
        "id": "e6c4c53b3f04adbe",
        "type": "function",
        "z": "e367a66498457c49",
        "name": "Table_Update",
        "func": "\nvar StatusInfo = { fill: \"grey\", shape: \"dot\", text: \"???\" };\nvar SensorDataRec = [];\nvar iTemperature;\nvar iHumidity;\nvar iCo2Value;\nvar iCo2SensTemp;\nvar dtTimeStamp;\nvar strTimestamp;\n\n\n// make sure that a data record was received\nif ( !msg.topic.includes(\"StData\") )\n{\n    StatusInfo = { fill: \"yellow\", shape: \"dot\", text: msg.topic };\n    node.status(StatusInfo);\n    return null;\n}\n\n// get Sensor Data from StationData Message\niTemperature = msg.payload.Temperature;\niHumidity = msg.payload.Humidity;\niCo2Value = msg.payload.Co2Value;\niCo2SensTemp = msg.payload.Co2SensTemp;\n\n// build Timestamp\ndtTimeStamp = new Date();\nstrTimestamp = dtTimeStamp.getFullYear().toString() + \"-\" +\n               (dtTimeStamp.getMonth() + 1).toString().padStart(2, \"0\") + \"-\" +\n               dtTimeStamp.getDate().toString().padStart(2, \"0\") + \" - \" +\n               dtTimeStamp.getHours().toString().padStart(2, \"0\") + \":\" +\n               dtTimeStamp.getMinutes().toString().padStart(2, \"0\") + \":\" +\n               dtTimeStamp.getSeconds().toString().padStart(2, \"0\");\n\n// build message to send\nSensorDataRec = [\n    {\n        \"id\": 1,\n        \"Sensor\": \"Temperature\",\n        \"Value\": iTemperature.toString(),\n        \"Timestamp\": strTimestamp\n    },\n    {\n        \"id\": 2,\n        \"Sensor\": \"Humidity\",\n        \"Value\": iHumidity.toString(),\n        \"Timestamp\": strTimestamp\n    },\n    {\n        \"id\": 3,\n        \"Sensor\": \"Co2Value\",\n        \"Value\": iCo2Value.toString(),\n        \"Timestamp\": strTimestamp\n    },\n    {\n        \"id\": 4,\n        \"Sensor\": \"Co2SensTemp\",\n        \"Value\": iCo2SensTemp.toString(),\n        \"Timestamp\": strTimestamp\n    }\n];\n\n// set NodeStatus text\nStatusInfo = { fill: \"green\", shape: \"ring\", text: \"Table updated at: \" + strTimestamp };\nnode.status(StatusInfo);\n\nmsg.payload = SensorDataRec;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 380,
        "wires": [
            [
                "304d141185851b62",
                "184215c1b184d68e"
            ]
        ]
    },
    {
        "id": "1c64e347f90b14b2",
        "type": "comment",
        "z": "e367a66498457c49",
        "name": "---- Sensor Data Table ----",
        "info": "",
        "x": 550,
        "y": 340,
        "wires": []
    },
    {
        "id": "9a3b04dd4d8c07b6",
        "type": "comment",
        "z": "e367a66498457c49",
        "name": "---- Sensor Data Widgets ----",
        "info": "",
        "x": 560,
        "y": 200,
        "wires": []
    },
    {
        "id": "9d0077a1ee827a5c",
        "type": "comment",
        "z": "e367a66498457c49",
        "name": "---- Timer Heartbeat On/Off ----",
        "info": "",
        "x": 570,
        "y": 720,
        "wires": []
    },
    {
        "id": "be3dd6d31addcadb",
        "type": "function",
        "z": "e367a66498457c49",
        "name": "InfluxDB_Insert",
        "func": "\nvar StatusInfo = { fill: \"grey\", shape: \"dot\", text: \"???\" };\nvar Msg_DB_Entry = {};\nvar DB_Entry = {};\nvar strTopic;\nvar astrTopicItems;\nvar strDevName;\nvar strRecordType;\nvar strMeasurement;\n\n\n// split the received MQTT Topic into its individual parts\nstrTopic = msg.topic;\nastrTopicItems = strTopic.split(\"/\");\n\n// get DevName (following to 'SmBrd/')\nstrDevName = astrTopicItems[1];\n\n// get RecordType (last part of Topic)\nstrRecordType = astrTopicItems[astrTopicItems.length - 1];\n\n// build Measurement Name depending on RecordType\nstrMeasurement = strDevName + '_' + strRecordType;\n\n// move Data from received Message to DB_Entry Message\nif (strRecordType == \"StData\")\n{\n    // move Sensor Data from StationData Message to DB_Entry Object\n    DB_Entry.PacketNum     = msg.payload.PacketNum;\n    DB_Entry.MainLoopCycle = msg.payload.MainLoopCycle;\n    DB_Entry.Uptime        = msg.payload.Uptime;\n    DB_Entry.NetErrorLevel = msg.payload.NetErrorLevel;\n    DB_Entry.Key0          = msg.payload.Key0;\n    DB_Entry.Key1          = msg.payload.Key1;\n    DB_Entry.Temperature   = msg.payload.Temperature;\n    DB_Entry.Humidity      = msg.payload.Humidity;\n    DB_Entry.Co2Value      = msg.payload.Co2Value;\n    DB_Entry.Co2SensTemp   = msg.payload.Co2SensTemp;\n\n    // move DB_Entry Object to DB_Entry Message\n    Msg_DB_Entry.payload = DB_Entry;\n}\nelse\n{\n    // move Data from Bootup Message to DB_Entry Message\n    Msg_DB_Entry.payload = msg.payload;\n}\n\n// the measurement property is reused by the InfluxDB Node,\n// therefore the Measurement Name does not need to be specified\n// in the InfluxDB Node itself (allows more generic flow)\nMsg_DB_Entry.measurement = strMeasurement;\n\n// set NodeStatus text\nStatusInfo = { fill: \"green\", shape: \"ring\", text: \"Ins PacketNum=\" + Msg_DB_Entry.payload.PacketNum.toString() +\n                                                   \" to: '\" + strMeasurement + \"'\" };\nnode.status(StatusInfo);\n\nreturn Msg_DB_Entry;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 120,
        "wires": [
            [
                "50e7b2b9460f9ff6"
            ]
        ]
    },
    {
        "id": "4e187b68609d35d6",
        "type": "debug",
        "z": "e367a66498457c49",
        "name": "SmBrd_InfluxDB_Insert",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 970,
        "y": 80,
        "wires": []
    },
    {
        "id": "25b1f451bcbf82de",
        "type": "influxdb out",
        "z": "e367a66498457c49",
        "influxdb": "9e85b006b51bb62f",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1010,
        "y": 120,
        "wires": []
    },
    {
        "id": "50e7b2b9460f9ff6",
        "type": "gate",
        "z": "e367a66498457c49",
        "name": "Gate",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "x": 730,
        "y": 100,
        "wires": [
            [
                "25b1f451bcbf82de",
                "4e187b68609d35d6"
            ]
        ]
    },
    {
        "id": "8191c03e7f083aa2",
        "type": "ui_switch",
        "z": "e367a66498457c49",
        "name": "Enable Write to InfluxDB",
        "label": "Write to InfluxDB",
        "tooltip": "",
        "group": "9298626ca39de0c8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "control",
        "style": "",
        "onvalue": "open",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "close",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "x": 490,
        "y": 80,
        "wires": [
            [
                "50e7b2b9460f9ff6"
            ]
        ]
    },
    {
        "id": "e5b409b85a5c1ddf",
        "type": "comment",
        "z": "e367a66498457c49",
        "name": "---- Write to InfluxDB ----",
        "info": "",
        "x": 550,
        "y": 40,
        "wires": []
    },
    {
        "id": "18a1d8c5d4b567fd",
        "type": "inject",
        "z": "e367a66498457c49",
        "name": "Event_Open",
        "props": [
            {
                "p": "payload",
                "v": "open",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "open",
        "payloadType": "str",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "8191c03e7f083aa2"
            ]
        ]
    },
    {
        "id": "f1c273240d27888e",
        "type": "ui_dropdown",
        "z": "e367a66498457c49",
        "name": "LED Bar Indicator",
        "label": "",
        "tooltip": "",
        "place": "",
        "group": "d6327655e916c160",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "-Off-",
                "value": "0",
                "type": "str"
            },
            {
                "label": "Temperature",
                "value": "1",
                "type": "str"
            },
            {
                "label": "Humidity",
                "value": "2",
                "type": "str"
            },
            {
                "label": "CO2",
                "value": "3",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 530,
        "y": 620,
        "wires": [
            [
                "6e198e5ad2f51abf",
                "c9575e789c94849e"
            ]
        ]
    },
    {
        "id": "6e198e5ad2f51abf",
        "type": "debug",
        "z": "e367a66498457c49",
        "name": "SmBrd_Settings_LedBarIndicator",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 600,
        "wires": []
    },
    {
        "id": "35b5e925eda53cf1",
        "type": "inject",
        "z": "e367a66498457c49",
        "name": "Event_CO2",
        "props": [
            {
                "p": "payload",
                "v": "3",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "str",
        "x": 150,
        "y": 620,
        "wires": [
            [
                "f1c273240d27888e"
            ]
        ]
    },
    {
        "id": "65d21dfc58d5dade",
        "type": "comment",
        "z": "e367a66498457c49",
        "name": "---- LED Bar Indicator ----",
        "info": "",
        "x": 550,
        "y": 580,
        "wires": []
    },
    {
        "id": "c9575e789c94849e",
        "type": "mqtt out",
        "z": "e367a66498457c49",
        "name": "",
        "topic": "SmBrd/<BoardName>/Settings/LedBarIndicator",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f6785e21fcb08933",
        "x": 1040,
        "y": 640,
        "wires": []
    },
    {
        "id": "494bc8cfc623befd",
        "type": "ui_text",
        "z": "e367a66498457c49",
        "group": "f573321cc222161f",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Timer State",
        "format": "<font size=\"2\">{{msg.extState}}</font>",
        "layout": "row-spread",
        "x": 930,
        "y": 860,
        "wires": []
    },
    {
        "id": "a57f7aec02f3619a",
        "type": "ui_dropdown",
        "z": "e367a66498457c49",
        "name": "Heartbeat Mode",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "f573321cc222161f",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Timer Automatic",
                "value": "auto",
                "type": "str"
            },
            {
                "label": "On (next 24h)",
                "value": "manual on",
                "type": "str"
            },
            {
                "label": "Off (next 24h)",
                "value": "manual off",
                "type": "str"
            },
            {
                "label": "Timer -Off-",
                "value": "quiet",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 420,
        "y": 780,
        "wires": [
            [
                "a403e35fb6286af2"
            ]
        ]
    },
    {
        "id": "dee64658b4b90a52",
        "type": "inject",
        "z": "e367a66498457c49",
        "name": "Init_HeatbeatMode",
        "props": [
            {
                "p": "payload",
                "v": "auto",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "auto",
        "payloadType": "str",
        "x": 170,
        "y": 780,
        "wires": [
            [
                "a57f7aec02f3619a"
            ]
        ]
    },
    {
        "id": "a403e35fb6286af2",
        "type": "bigtimer",
        "z": "e367a66498457c49",
        "outtopic": "/BigTimer",
        "outpayload1": "1",
        "outpayload2": "0",
        "name": "Timer Heartbeat On/Off",
        "comment": "Timer Heartbeat",
        "lat": 0,
        "lon": 0,
        "starttime": "480",
        "endtime": "1260",
        "starttime2": 0,
        "endtime2": 0,
        "startoff": 0,
        "endoff": 0,
        "startoff2": 0,
        "endoff2": 0,
        "offs": 0,
        "outtext1": "on",
        "outtext2": "off",
        "timeout": 1440,
        "sun": true,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "jan": true,
        "feb": true,
        "mar": true,
        "apr": true,
        "may": true,
        "jun": true,
        "jul": true,
        "aug": true,
        "sep": true,
        "oct": true,
        "nov": true,
        "dec": true,
        "day1": 0,
        "month1": 0,
        "day2": 0,
        "month2": 0,
        "day3": 0,
        "month3": 0,
        "day4": 0,
        "month4": 0,
        "day5": 0,
        "month5": 0,
        "day6": 0,
        "month6": 0,
        "day7": 0,
        "month7": 0,
        "day8": 0,
        "month8": 0,
        "day9": 0,
        "month9": 0,
        "day10": 0,
        "month10": 0,
        "day11": 0,
        "month11": 0,
        "day12": 0,
        "month12": 0,
        "d1": 0,
        "w1": 0,
        "d2": 0,
        "w2": 0,
        "d3": 0,
        "w3": 0,
        "d4": 0,
        "w4": 0,
        "d5": 0,
        "w5": 0,
        "d6": 0,
        "w6": 0,
        "xday1": 0,
        "xmonth1": 0,
        "xday2": 0,
        "xmonth2": 0,
        "xday3": 0,
        "xmonth3": 0,
        "xday4": 0,
        "xmonth4": 0,
        "xday5": 0,
        "xmonth5": 0,
        "xday6": 0,
        "xmonth6": 0,
        "xday7": 0,
        "xmonth7": 0,
        "xday8": 0,
        "xmonth8": 0,
        "xday9": 0,
        "xmonth9": 0,
        "xday10": 0,
        "xmonth10": 0,
        "xday11": 0,
        "xmonth11": 0,
        "xday12": 0,
        "xmonth12": 0,
        "xd1": 0,
        "xw1": 0,
        "xd2": 0,
        "xw2": 0,
        "xd3": 0,
        "xw3": 0,
        "xd4": 0,
        "xw4": 0,
        "xd5": 0,
        "xw5": 0,
        "xd6": 0,
        "xw6": 0,
        "suspend": false,
        "random": false,
        "randon1": false,
        "randoff1": false,
        "randon2": false,
        "randoff2": false,
        "repeat": false,
        "atstart": true,
        "odd": false,
        "even": false,
        "x": 650,
        "y": 780,
        "wires": [
            [
                "12a3e17e763239f7",
                "9b4406263c853451",
                "3812594aeea6a365"
            ],
            [
                "494bc8cfc623befd"
            ],
            []
        ]
    },
    {
        "id": "9b4406263c853451",
        "type": "ui_led",
        "z": "e367a66498457c49",
        "order": 2,
        "group": "f573321cc222161f",
        "width": 0,
        "height": 0,
        "label": "Current Heartbeat State",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#696969",
                "value": "0",
                "valueType": "str"
            },
            {
                "color": "#87cefa",
                "value": "1",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Heartbeat State",
        "x": 940,
        "y": 820,
        "wires": []
    },
    {
        "id": "68832e9774d28af1",
        "type": "debug",
        "z": "e367a66498457c49",
        "name": "SmBrd_MQTT_Recv_Msg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 160,
        "wires": []
    },
    {
        "id": "184215c1b184d68e",
        "type": "debug",
        "z": "e367a66498457c49",
        "name": "Table_Input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 360,
        "wires": []
    },
    {
        "id": "0c5564d43b4fae77",
        "type": "countdown",
        "z": "e367a66498457c49",
        "name": "",
        "topic": "",
        "payloadTimerStart": "true",
        "payloadTimerStartType": "bool",
        "payloadTimerStop": "false",
        "payloadTimerStopType": "bool",
        "timer": "240",
        "resetWhileRunning": true,
        "outputOnReset": false,
        "setTimeToNewWhileRunning": true,
        "startCountdownOnControlMessage": false,
        "x": 930,
        "y": 520,
        "wires": [
            [
                "ed11ba28fbb6d4e1"
            ],
            []
        ]
    },
    {
        "id": "facd05e0d7b76b32",
        "type": "function",
        "z": "e367a66498457c49",
        "name": "Packet_ACK",
        "func": "\nvar StatusInfo = { fill: \"grey\", shape: \"dot\", text: \"???\" };\nvar strTopic;\nvar astrTopicItems;\nvar iPacketNum;\n\n\n// make sure that a data record was received\nif ( !msg.topic.includes(\"StData\") )\n{\n    StatusInfo = { fill: \"yellow\", shape: \"dot\", text: msg.topic };\n    node.status(StatusInfo);\n    return null;\n}\n\n// split the received MQTT Topic into its individual parts\nstrTopic = msg.topic;\nastrTopicItems = strTopic.split(\"/\");\n\n// build topic for acknowledge message\nstrTopic = astrTopicItems[0] + \"/\" + astrTopicItems[1] + \"/Ack/PacketNum\";\n\n// get PacketNum from StationData Message\niPacketNum = msg.payload.PacketNum;\n\n// set NodeStatus text\nStatusInfo = { fill: \"green\", shape: \"ring\", text: \"ACK PacketNum:\" + iPacketNum.toString() };\nnode.status(StatusInfo);\n\nmsg.topic = strTopic;\nmsg.payload = iPacketNum;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 500,
        "wires": [
            [
                "0c5564d43b4fae77",
                "108d5653d0ddaa3b"
            ]
        ]
    },
    {
        "id": "108d5653d0ddaa3b",
        "type": "mqtt out",
        "z": "e367a66498457c49",
        "name": "PacketNum ACK",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f6785e21fcb08933",
        "x": 940,
        "y": 480,
        "wires": []
    },
    {
        "id": "ed11ba28fbb6d4e1",
        "type": "ui_led",
        "z": "e367a66498457c49",
        "order": 1,
        "group": "b90cdd60e8af675b",
        "width": 5,
        "height": 1,
        "label": "Up to Date Level",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#8b0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#00b900",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "Up to Date Level",
        "x": 1150,
        "y": 520,
        "wires": []
    },
    {
        "id": "7075af4468219423",
        "type": "comment",
        "z": "e367a66498457c49",
        "name": "---- ACK Packet ----",
        "info": "",
        "x": 530,
        "y": 460,
        "wires": []
    },
    {
        "id": "28247c2086228cdd",
        "type": "ui_text",
        "z": "e367a66498457c49",
        "group": "b90cdd60e8af675b",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "Uptime",
        "label": "Uptime",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 910,
        "y": 180,
        "wires": []
    },
    {
        "id": "59325a1cc858ca41",
        "type": "debug",
        "z": "e367a66498457c49",
        "name": "SmBrd_Settings_DataPackPubCycleTime",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 920,
        "wires": []
    },
    {
        "id": "30e7c23c5fea4b3d",
        "type": "mqtt out",
        "z": "e367a66498457c49",
        "name": "",
        "topic": "SmBrd/<BoardName>/Settings/DataPackPubCycleTime",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f6785e21fcb08933",
        "x": 1070,
        "y": 960,
        "wires": []
    },
    {
        "id": "bd7e1e271db843ed",
        "type": "comment",
        "z": "e367a66498457c49",
        "name": "---- Timer DataCycleTime ----",
        "info": "",
        "x": 560,
        "y": 920,
        "wires": []
    },
    {
        "id": "2a36a9cbaa5c43a6",
        "type": "inject",
        "z": "e367a66498457c49",
        "name": "Init_DataCycleTime",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "auto",
        "payloadType": "str",
        "x": 170,
        "y": 980,
        "wires": [
            [
                "3b9e544a987477e3"
            ]
        ]
    },
    {
        "id": "3b9e544a987477e3",
        "type": "bigtimer",
        "z": "e367a66498457c49",
        "outtopic": "/BigTimer",
        "outpayload1": "60",
        "outpayload2": "120",
        "name": "Timer DataCycleTime",
        "comment": "Timer Heartbeat",
        "lat": 0,
        "lon": 0,
        "starttime": "360",
        "endtime": "1260",
        "starttime2": 0,
        "endtime2": 0,
        "startoff": 0,
        "endoff": 0,
        "startoff2": 0,
        "endoff2": 0,
        "offs": 0,
        "outtext1": "60 sec",
        "outtext2": "120 sec",
        "timeout": 1440,
        "sun": true,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "jan": true,
        "feb": true,
        "mar": true,
        "apr": true,
        "may": true,
        "jun": true,
        "jul": true,
        "aug": true,
        "sep": true,
        "oct": true,
        "nov": true,
        "dec": true,
        "day1": 0,
        "month1": 0,
        "day2": 0,
        "month2": 0,
        "day3": 0,
        "month3": 0,
        "day4": 0,
        "month4": 0,
        "day5": 0,
        "month5": 0,
        "day6": 0,
        "month6": 0,
        "day7": 0,
        "month7": 0,
        "day8": 0,
        "month8": 0,
        "day9": 0,
        "month9": 0,
        "day10": 0,
        "month10": 0,
        "day11": 0,
        "month11": 0,
        "day12": 0,
        "month12": 0,
        "d1": 0,
        "w1": 0,
        "d2": 0,
        "w2": 0,
        "d3": 0,
        "w3": 0,
        "d4": 0,
        "w4": 0,
        "d5": 0,
        "w5": 0,
        "d6": 0,
        "w6": 0,
        "xday1": 0,
        "xmonth1": 0,
        "xday2": 0,
        "xmonth2": 0,
        "xday3": 0,
        "xmonth3": 0,
        "xday4": 0,
        "xmonth4": 0,
        "xday5": 0,
        "xmonth5": 0,
        "xday6": 0,
        "xmonth6": 0,
        "xday7": 0,
        "xmonth7": 0,
        "xday8": 0,
        "xmonth8": 0,
        "xday9": 0,
        "xmonth9": 0,
        "xday10": 0,
        "xmonth10": 0,
        "xday11": 0,
        "xmonth11": 0,
        "xday12": 0,
        "xmonth12": 0,
        "xd1": 0,
        "xw1": 0,
        "xd2": 0,
        "xw2": 0,
        "xd3": 0,
        "xw3": 0,
        "xd4": 0,
        "xw4": 0,
        "xd5": 0,
        "xw5": 0,
        "xd6": 0,
        "xw6": 0,
        "suspend": false,
        "random": false,
        "randon1": false,
        "randoff1": false,
        "randon2": false,
        "randoff2": false,
        "repeat": false,
        "atstart": true,
        "odd": false,
        "even": false,
        "x": 540,
        "y": 980,
        "wires": [
            [
                "59325a1cc858ca41",
                "30e7c23c5fea4b3d"
            ],
            [],
            [
                "8a76bd8b3e75c4c2"
            ]
        ]
    },
    {
        "id": "8a76bd8b3e75c4c2",
        "type": "ui_text",
        "z": "e367a66498457c49",
        "group": "b90cdd60e8af675b",
        "order": 12,
        "width": 0,
        "height": 0,
        "name": "Data Cycle Time",
        "label": "Data Cycle Time",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 940,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8efe8708feb606e7",
        "type": "ui_spacer",
        "z": "e367a66498457c49",
        "name": "spacer",
        "group": "b90cdd60e8af675b",
        "order": 2,
        "width": 3,
        "height": 1
    },
    {
        "id": "675512ab66d7b99a",
        "type": "ui_spacer",
        "z": "e367a66498457c49",
        "name": "spacer",
        "group": "b90cdd60e8af675b",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "48e619f91f6f7951",
        "type": "ui_spacer",
        "z": "e367a66498457c49",
        "name": "spacer",
        "group": "b90cdd60e8af675b",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "6bfa9f910b9f0564",
        "type": "ui_spacer",
        "z": "e367a66498457c49",
        "name": "spacer",
        "group": "b90cdd60e8af675b",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "27ca4b47eb59cc18",
        "type": "ui_spacer",
        "z": "e367a66498457c49",
        "name": "spacer",
        "group": "b90cdd60e8af675b",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "f6785e21fcb08933",
        "type": "mqtt-broker",
        "name": "HomeInformationCenter",
        "broker": "192.168.42.21",
        "port": "1883",
        "clientid": "NodeRed@Raspi",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b90cdd60e8af675b",
        "type": "ui_group",
        "name": "Sensor Data",
        "tab": "099f9a2648cf8446",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "9e85b006b51bb62f",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "ESP32SmartBoard",
        "name": "ESP32SmartBoard@LocalHost",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "",
        "timeout": "",
        "rejectUnauthorized": false
    },
    {
        "id": "9298626ca39de0c8",
        "type": "ui_group",
        "name": "Write to DataBase",
        "tab": "099f9a2648cf8446",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d6327655e916c160",
        "type": "ui_group",
        "name": "LED Bar Indicator",
        "tab": "099f9a2648cf8446",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f573321cc222161f",
        "type": "ui_group",
        "name": "Heartbeat Mode",
        "tab": "099f9a2648cf8446",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "099f9a2648cf8446",
        "type": "ui_tab",
        "name": "SmartBoard_Template",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    }
]